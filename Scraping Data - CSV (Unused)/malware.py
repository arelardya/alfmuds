# import csv

# def convert_txt_to_csv(input_txt_file, output_csv_file):
#     with open(input_txt_file, 'r', encoding='utf-8') as txt_file:
#         # Read lines from the text file
#         lines = txt_file.readlines()

#     with open(output_csv_file, 'w', newline='', encoding='utf-8') as csv_file:
#         writer = csv.writer(csv_file)

#         for line in lines:
#             # Strip leading/trailing whitespace and check for comment lines
#             if line.startswith('#'):
#                 continue  # Skip comment lines
            
#             # Remove leading and trailing whitespace
#             line = line.strip()
            
#             # If the line is empty, skip it
#             if not line:
#                 continue
            
#             # Split the line by commas, while keeping quoted strings intact
#             row = csv.reader([line]).__next__()
#             writer.writerow(row)

# # Example usage
# input_txt_file = (r'C:\Users\arell\Documents\1_ALF\CSV\phishing-links-ACTIVE.txt ')  # Replace with your input file name
# output_csv_file = 'phphph.csv'  # Desired output CSV file name
# convert_txt_to_csv(input_txt_file, output_csv_file)

# print(f"Converted {input_txt_file} to {output_csv_file}")

# import pandas as pd

# def add_headers(input_csv_file, output_csv_file):
#     # Define the headers
#     headers = ["url"]
    
#     # Read the CSV file without headers
#     df = pd.read_csv(input_csv_file, header=None)
    
#     # Add the headers to the DataFrame
#     df.columns = headers
    
#     # Save the updated DataFrame to a new CSV file
#     df.to_csv(output_csv_file, index=False)

# # Example usage
# input_csv_file = 'kag.csv'  # Replace with your input file name
# output_csv_file = 'kag.csv'  # Desired output file name
# add_headers(input_csv_file, output_csv_file)

# print(f"Added headers to {input_csv_file} and saved as {output_csv_file}")



import pandas as pd

def process_csv(input_csv_file, output_csv_file):
    # Read the CSV file
    df = pd.read_csv(input_csv_file)
    
    # Keep only the 'url' column
    label = type
    df = df[['url','label']]

    
    # Save the modified dataframe to a new CSV file
    df.to_csv(output_csv_file, index=False)

# Example usage
input_csv_file = './CSV/urldata.csv'  # Replace with your input file name
output_csv_file = 'kag.csv'  # Desired output file name
process_csv(input_csv_file, output_csv_file)

print(f"Processed {input_csv_file} and saved as {output_csv_file}")

#  Full database dump, contains URLs that are either actively distributing malware or that have been added to URLhaus within the past 90 days: